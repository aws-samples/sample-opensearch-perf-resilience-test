AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for OpenSearch Benchmark Infrastructure'

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.1.0.0/16
    Description: CIDR block for the DR VPC (different from primary region)

  PublicSubnet1CIDR:
    Type: String
    Default: 10.1.1.0/24
    Description: CIDR block for public subnet 1

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.1.2.0/24
    Description: CIDR block for private subnet 1

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.1.3.0/24
    Description: CIDR block for private subnet 2

  OpenSearchDomainName:
    Type: String
    Default: benchmark-domain-dr
    Description: Name of the DR OpenSearch domain

  PrimaryDomainEndpoint:
    Type: String
    Description: Endpoint of the primary region OpenSearch domain
  
  PrimaryDomainARN:
    Type: String
    Description: ARN of the primary region OpenSearch domain

  PrimaryRegion:
    Type: String
    Description: Region where primary OpenSearch domain is deployed

  PrimaryVPCId:
    Type: String
    Description: VPCId primary OpenSearch domain is deployed

  DataNodeCount:
    Type: Number
    Default: 4
    MinValue: 2
    MaxValue: 10
    Description: Number of data nodes (must be even for Multi-AZ)

  InstanceType:
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
    Description: EC2 instance type for the benchmark runner

  AllowedSSHCIDR:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block allowed to access SSH (should be restricted to your IP or VPN range)
  
  ClusterConfig:
    Type: String
    Default: standard
    AllowedValues:
      - standard
      - minimal
      - coordinator
    Description: >
      Cluster configuration type:
      'standard' - Multi-AZ with dedicated master nodes,
      'minimal' - Multi-AZ without dedicated nodes,
      'coordinator' - Multi-AZ with coordinator nodes

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-VPC

  # VPC Flow Logs for network traffic monitoring
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Sub "/${AWS::StackName}/vpc-flow-logs"
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-VPC-FlowLogs

  VPCFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/vpc-flow-logs"
      RetentionInDays: 14

  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VPCFlowLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}/vpc-flow-logs:*"

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: !Ref PrimaryVPCId
      PeerRegion: !Ref PrimaryRegion
      Tags:
        - Key: Name
          Value: 'Cross-Region-VPC-Peering'
        - Key: Description
          Value: 'Peering connection between primary and DR VPCs for OpenSearch replication'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-IGW
        - Key: Project
          Value: OpenSearch-Benchmark

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true  
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-Public-Subnet
        - Key: Project
          Value: OpenSearch-Benchmark

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-Private-Subnet-1
        - Key: Project
          Value: OpenSearch-Benchmark

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-Private-Subnet-2
        - Key: Project
          Value: OpenSearch-Benchmark

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-Route-Table
        - Key: Project
          Value: OpenSearch-Benchmark

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteToVPCPri:
    Type: AWS::EC2::Route
    DependsOn: VPCPeeringConnection
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 10.0.0.0/16  # VPC Pri's CIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Security Groups with proper descriptions and restricted access
  BenchmarkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for benchmark EC2 instance in DR region
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHCIDR
          Description: "Allows SSH access from specified CIDR range for administration"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 18.206.107.24/29
          Description: "Allows SSH access from EC2 Instance Connect (us-east-1)"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 3.16.146.0/29
          Description: "Allows SSH access from EC2 Instance Connect (us-east-2)"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 13.52.6.112/29
          Description: "Allows SSH access from EC2 Instance Connect (us-west-1)"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 18.237.140.160/29
          Description: "Allows SSH access from EC2 Instance Connect (us-west-2)"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "Allows HTTPS outbound traffic for package downloads and API calls"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Allows HTTP outbound traffic for package downloads"
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-EC2-SG
        - Key: Project
          Value: OpenSearch-Benchmark


  OpenSearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for OpenSearch domain in DR region
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref BenchmarkSecurityGroup
          Description: "Allows HTTPS access from benchmark instances"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: "Allows HTTPS access from primary VPC for replication"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: "Allows HTTPS outbound traffic to primary VPC for replication"
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-Domain-SG
        - Key: Project
          Value: OpenSearch-Benchmark

  BenchmarkToOpenSearchEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BenchmarkSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref OpenSearchSecurityGroup
      Description: "Allows HTTPS traffic to OpenSearch domain"

  # IAM Role and Instance Profile
  BenchmarkRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-IAM-Role
        - Key: Project
          Value: OpenSearch-Benchmark
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: OpenSearchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttp*
                  - es:Describe*
                  - es:List*
                  - es:Get*
                  - es:CreateOutboundConnection
                  - es:AcceptInboundConnection
                  - es:AcceptInboundCrossClusterSearchConnection
                  - es:DescribeOutboundCrossClusterSearchConnections
                  - es:DescribeOutboundConnections
                  - es:DescribeOutboundCrossClusterSearchConnections
                  - es:DeleteOutboundConnection
                  - es:DeleteOutboundCrossClusterSearchConnection
                Resource: 
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomainName}/*
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomainName}
                  - !Ref PrimaryDomainARN
                  - !Sub arn:aws:es:${PrimaryRegion}:${AWS::AccountId}:domain/*

  BenchmarkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BenchmarkRole

  # OpenSearch Domain with logging enabled
  OpenSearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/opensearch/${OpenSearchDomainName}"
      RetentionInDays: 30

  OpenSearchLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: OpenSearchLogPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:PutLogEventsBatch
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/opensearch/${OpenSearchDomainName}:*"
      Roles:
        - !Ref OpenSearchLogRole

  OpenSearchLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: sts:AssumeRole
  
  OpenSearchLogResourcePolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: OpenSearchLogResourcePolicy
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
             "Effect": "Allow",
             "Principal": {
               "Service": "es.amazonaws.com"
             },
             "Action": [
               "logs:CreateLogStream",
               "logs:PutLogEvents",
               "logs:PutLogEventsBatch"
             ],
             "Resource": [
              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/opensearch/${OpenSearchDomainName}:*",
              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/opensearch/${OpenSearchDomainName}"
             ]
            }
          ]
        }


  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - 
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 
              - es:*
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomainName}/*
      DomainName: !Ref OpenSearchDomainName
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-Domain
        - Key: Project
          Value: OpenSearch-Benchmark
      EngineVersion: OpenSearch_2.5
      ClusterConfig: !If
        - IsStandardConfig
        - # Standard configuration with dedicated master nodes
          InstanceType: r6g.large.search
          InstanceCount: !Ref DataNodeCount
          DedicatedMasterEnabled: true
          DedicatedMasterType: r6g.large.search
          DedicatedMasterCount: 3
          ZoneAwarenessEnabled: true
          ZoneAwarenessConfig:
            AvailabilityZoneCount: 2
        - !If
          - IsMinimalConfig
          - # Minimal configuration without dedicated nodes
            InstanceType: r6g.large.search
            InstanceCount: !Ref DataNodeCount
            DedicatedMasterEnabled: false
            ZoneAwarenessEnabled: true
            ZoneAwarenessConfig:
              AvailabilityZoneCount: 2
          - # Configuration with coordinator nodes
            InstanceType: r6g.large.search
            InstanceCount: !Ref DataNodeCount
            DedicatedMasterEnabled: true
            DedicatedMasterType: r6g.large.search
            DedicatedMasterCount: 3
            WarmEnabled: false
            ColdEnabled: false
            CoordinatorEnabled: true
            CoordinatorInstanceType: r6g.large.search
            CoordinatorInstanceCount: 2
            ZoneAwarenessEnabled: true
            ZoneAwarenessConfig:
              AvailabilityZoneCount: 2
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 150
        VolumeType: gp3
      VPCOptions:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref OpenSearchSecurityGroup
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: admin
          MasterUserPassword: Admin123!
      LogPublishingOptions:
        ES_APPLICATION_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        AUDIT_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        INDEX_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        SEARCH_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true

  # EC2 Instance for Benchmark
  BenchmarkInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PublicSubnet1
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: "true"
            VolumeSize: "100" 
            VolumeType: "gp3"
            Encrypted: true  # Added encryption for EBS volumes
      SecurityGroupIds:
        - !Ref BenchmarkSecurityGroup
      IamInstanceProfile: !Ref BenchmarkInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e

          # Update system and install dependencies
          yum update -y

          # Create a new virtual environment
          python3 -m venv benchmark-env

          # Activate the virtual environment
          source benchmark-env/bin/activate

          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          rm -rf aws awscliv2.zip

          sudo yum install python3-pip -y
          echo "********* Pip installed **********"

          sudo yum install git -y
          echo "********* Git installed **********"

          # Create result Directory   
          RESULT_DIR="/home/ec2-user/results"     
          mkdir -p "$RESULT_DIR"

          # Create test scripts directory
          mkdir -p /home/ec2-user/dr-scripts
          cd /home/ec2-user/dr-scripts

          # Create CRR setup script
          cat > crr-setup.sh << 'EOL'
          #!/bin/bash
          
          # Function for retrying commands
          retry() {
              local attempts=3
              local wait=10
              local cmd="$@"
              
              for ((i=1; i<=attempts; i++)); do
                  echo "Attempt $i: Running command..."
                  if eval "$cmd"; then
                      return 0
                  fi
                  echo "Command failed. Waiting $wait seconds before retry..."
                  sleep $wait
              done
              echo "Error: Command failed after $attempts attempts"
              return 1
          }
          
          # CloudFormation template variables
          PRI_DOMAIN="benchmark-domain"
          DR_DOMAIN="benchmark-domain-dr"
          PRI_REGION="${PrimaryRegion}"
          DR_REGION="${AWS::Region}"
          OWNER_ID="${AWS::AccountId}"
          
          # Create outbound connection
          echo "Creating outbound connection..."
          CONN_ID=$(aws opensearch create-outbound-connection \
              --local-domain-info "{\"AWSDomainInformation\": {\"OwnerId\": \"$OWNER_ID\", \"DomainName\": \"$DR_DOMAIN\", \"Region\": \"$DR_REGION\"}}" \
              --remote-domain-info "{\"AWSDomainInformation\": {\"OwnerId\": \"$OWNER_ID\", \"DomainName\": \"$PRI_DOMAIN\", \"Region\": \"$PRI_REGION\"}}" \
              --connection-alias "dr_connection" \
              --connection-mode "DIRECT" \
              --query 'ConnectionId' \
              --output text)
          
          # Wait for connection creation
          sleep 30
          
          # Accept inbound connection
          echo "Accepting inbound connection..."
          aws opensearch accept-inbound-connection --connection-id "$CONN_ID" --region "$PRI_REGION"
          
          # Wait for connection establishment
          sleep 30
          
          # Start autofollow rule
          echo "Setting up autofollow rule..."
          curl -XPOST "https://${OpenSearchDomain.DomainEndpoint}/_plugins/_replication/_autofollow" \
              -H "Content-Type: application/json" \
              -u "admin:Admin123!" \
              -d '{
                  "leader_alias": "dr_connection",
                  "name": "dr-replication",
                  "pattern": "*",
                  "use_roles": {
                      "leader_cluster_role": "all_access",
                      "follower_cluster_role": "all_access"
                  }
              }'
          
          echo "Setup completed"          
          
          EOL
          
          chmod +x crr-setup.sh

          # Create DR failover test script
          cat > dr-failover.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # Variables
          PRI_DOMAIN="benchmark-domain"
          DR_DOMAIN="benchmark-domain-dr"
          PRI_REGION="${PrimaryRegion}"
          DR_REGION="${AWS::Region}"
          OWNER_ID="${AWS::AccountId}"
          DOMAIN_ENDPOINT_DR="https://${OpenSearchDomain.DomainEndpoint}"
          
          LOG_FILE="/home/ec2-user/dr-logs/dr_$(date +%Y%m%d-%H%M%S).log"
          mkdir -p /home/ec2-user/dr-logs
          
          # Test scenarios
          run_dr_test() {
              local test_name=$1
              local test_function=$2
              
              echo "========================================="
              echo "Running DR Test: $test_name"
              echo "========================================="
              
              $test_function
              
              echo "Test completed: $test_name"
              echo ""
          }
          
          # Test 1: Data Integrity Validation
          test_data_integrity() {
              echo "Creating test index in primary region..." | tee -a "$LOG_FILE"
              
              # Create test index with sample data
              curl -X PUT "https://${PrimaryDomainEndpoint}/dr-test-index" \
                  -H "Content-Type: application/json" \
                  -u "admin:Admin123!" \
                  -d '{
                      "settings": {
                          "number_of_shards": 4,
                          "number_of_replicas": 1
                      }
                  }'
              
              # Insert test documents
              for i in {1..100}; do
                  curl -X POST "https://${PrimaryDomainEndpoint}/dr-test-index/_doc/$i" \
                      -H "Content-Type: application/json" \
                      -u "admin:Admin123!" \
                      -d '{
                          "id": '"$i"',
                          "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'",
                          "message": "DR test document '"$i"'"
                      }'
              done
              
              # Wait for replication
              sleep 60
              
              # Verify document count in secondary
              PRIMARY_COUNT=$(curl -s "https://${PrimaryDomainEndpoint}/dr-test-index/_count" \
                  -u "admin:Admin123!" | jq '.count')
              
              SECONDARY_COUNT=$(curl -s "$DOMAIN_ENDPOINT_DR/dr-test-index/_count" \
                  -u "admin:Admin123!" | jq '.count')
              
              if [ "$PRIMARY_COUNT" -eq "$SECONDARY_COUNT" ]; then
                  echo "✓ Data integrity test passed: $PRIMARY_COUNT documents replicated" | tee -a "$LOG_FILE"
              else
                  echo "✗ Data integrity test failed: Primary=$PRIMARY_COUNT, Secondary=$SECONDARY_COUNT" | tee -a "$LOG_FILE"
              fi
          }
          
          # Test 2: Replication Lag Measurement
          test_replication_lag() {
              echo "Measuring replication lag..." | tee -a "$LOG_FILE"
              
              # Insert timestamped document in primary
              TIMESTAMP=$(date -u +%s%3N)
              curl -X POST "https://${PrimaryDomainEndpoint}/lag-test/_doc" \
                  -H "Content-Type: application/json" \
                  -u "admin:Admin123!" \
                  -d '{
                      "timestamp": '"$TIMESTAMP"',
                      "test": "replication-lag"
                  }'
              
              # Poll secondary until document appears
              START_TIME=$(date +%s)
              while true; do
                  RESULT=$(curl -s "$DOMAIN_ENDPOINT_DR/lag-test/_search" \
                      -H "Content-Type: application/json" \
                      -u "admin:Admin123!" \
                      -d '{
                          "query": {
                              "match": {
                                  "timestamp": '"$TIMESTAMP"'
                              }
                          }
                      }' | jq '.hits.total.value')
                  
                  if [ "$RESULT" -gt 0 ]; then
                      END_TIME=$(date +%s)
                      LAG=$((END_TIME - START_TIME))
                      echo "Replication lag: $LAG seconds"
                      break
                  fi
                  
                  sleep 1
              done
          }
          
          # Test 3: Simulated Failover
          test_failover_simulation() {
              echo "Simulating failover scenario..." | tee -a "$LOG_FILE"
              
              # Stop replication
              if ! curl -X POST "$DOMAIN_ENDPOINT_DR/_plugins/_replication/dr-test-index/_stop" \
                  -H "Content-Type: application/json" \
                  -u "admin:Admin123!" \
                  -d '{}'; then
                  echo "❌ Failed to stop replication" | tee -a "$LOG_FILE"
                  return 1
              fi
              
              # Make secondary writable
              if ! curl -XPUT "$DOMAIN_ENDPOINT_DR/_cluster/settings" \
                  -H "Content-Type: application/json" \
                  -u "admin:Admin123!" \
                  -d '{
                      "persistent": {
                          "cluster.blocks.read_only": false
                      }
                  }'; then
                  echo "❌ Failed to make secondary cluster writable" | tee -a "$LOG_FILE"
                  return 1
              fi
              
              # Test write to secondary
              if ! curl -X POST "$DOMAIN_ENDPOINT_DR/dr-test-index/_doc" \
                  -H "Content-Type: application/json" \
                  -u "admin:Admin123!" \
                  -d '{
                      "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'",
                      "status": "failover-successful"
                  }'; then
                  echo "❌ Failed to write to secondary cluster" | tee -a "$LOG_FILE"
                  return 1
              fi
              
              echo "✓ Failover simulation completed successfully" | tee -a "$LOG_FILE"
              return 0
          }
          
          # Main test execution
          main() {
              echo "Starting DR testing suite..." | tee -a "$LOG_FILE"
              local exit_code=0
              
              # Run tests in sequence with error handling
              echo "----------------------------------------" | tee -a "$LOG_FILE"
              if ! test_data_integrity; then
                  echo "❌ Data Integrity Test failed" | tee -a "$LOG_FILE"
                  exit_code=1
              fi
              
              echo "----------------------------------------" | tee -a "$LOG_FILE"
              if ! test_replication_lag; then
                  echo "❌ Replication Lag Test failed" | tee -a "$LOG_FILE"
                  exit_code=1
              fi
              
              echo "----------------------------------------" | tee -a "$LOG_FILE"
              if ! test_failover_simulation; then
                  echo "❌ Failover Simulation Test failed" | tee -a "$LOG_FILE"
                  exit_code=1
              fi
              
              # Final status
              echo "----------------------------------------" | tee -a "$LOG_FILE"
              if [ $exit_code -eq 0 ]; then
                  echo "✅ All tests completed successfully" | tee -a "$LOG_FILE"
              else
                  echo "❌ Some tests failed - check logs: $LOG_FILE" | tee -a "$LOG_FILE"
              fi
              
              return $exit_code
          }
          
          main "$@"          
          EOL

          chmod +x dr-failover.sh

          # Create CRR delete script
          cat > crr-delete.sh << 'EOL'
          #!/bin/bash
          
          # Variables
          PRI_DOMAIN="benchmark-domain"
          DR_DOMAIN="benchmark-domain-dr"
          PRI_REGION="${PrimaryRegion}"
          DR_REGION="${AWS::Region}"
          OWNER_ID="${AWS::AccountId}"
          DOMAIN_ENDPOINT_DR="https://${OpenSearchDomain.DomainEndpoint}"

          # Get all follower indices and store them in a variable
          follower_indices=$(curl -s -X GET "$DOMAIN_ENDPOINT_DR/_plugins/_replication/follower_stats" \
          -u "admin:Admin123!" \
          -H "Content-Type: application/json" \
          | jq -r '.index_stats | keys[]')

          # Loop through each follower index
          for index in $follower_indices; do
              # Stop replication
              curl -X POST "$DOMAIN_ENDPOINT_DR/_plugins/_replication/$index/_stop" \
                  -H "Content-Type: application/json" \
                  -u "admin:Admin123!" \
                  -d '{}'
              
              # Remove follower index
              curl -X DELETE "$DOMAIN_ENDPOINT_DR/$index" -u "admin:Admin123!"
              curl -X DELETE "https://${PrimaryDomainEndpoint}/$index" -u "admin:Admin123!"

          done

          echo "Stopped all replication"

          # Get connection ID
          CONN_ID=$(aws opensearch describe-outbound-connections \
          --query 'Connections[?ConnectionAlias==`dr_connection`].ConnectionId' \
          --output text)
          
          # Delete connection ID
          aws opensearch delete-outbound-connection --connection-id $CONN_ID --region $DR_REGION

          echo "CCR connection delete completed"

          EOL

          chmod +x crr-delete.sh


   
   
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-DR-Instance

Conditions:
  IsStandardConfig: !Equals [!Ref ClusterConfig, 'standard']
  IsMinimalConfig: !Equals [!Ref ClusterConfig, 'minimal']
  IsCoordinatorConfig: !Equals [!Ref ClusterConfig, 'coordinator']

Mappings:
  RegionMap:
    us-east-1:
      AMI: resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    us-east-2:
      AMI: ami-02d1e544b84bf7502
    us-west-1:
      AMI: ami-0d9858aa3c6322f73
    us-west-2:
      AMI: ami-098e42ae54c764c35

Outputs:
  BenchmarkInstancePublicIP:
    Description: Public IP of the benchmark EC2 instance
    Value: !GetAtt BenchmarkInstance.PublicIp

  OpenSearchDomainEndpoint:
    Description: Endpoint of the OpenSearch domain
    Value: !GetAtt OpenSearchDomain.DomainEndpoint

  VPCPeeringConnectionID:
    Description: VPC peering connection ID
    Value: !Ref VPCPeeringConnection