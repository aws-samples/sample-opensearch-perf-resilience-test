AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for OpenSearch Benchmark Infrastructure'

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet 1

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet 1

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for private subnet 2

  OpenSearchDomainName:
    Type: String
    Default: benchmark-domain
    Description: Name of the OpenSearch domain

  ClusterConfig:
    Type: String
    Default: standard
    AllowedValues:
      - standard
      - minimal
      - coordinator
    Description: >
      Cluster configuration type:
      'standard' - Multi-AZ with dedicated master nodes,
      'minimal' - Multi-AZ without dedicated nodes,
      'coordinator' - Multi-AZ with coordinator nodes

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

  DataNodeCount:
    Type: Number
    Default: 4
    MinValue: 2
    MaxValue: 10
    Description: Number of data nodes (must be even for Multi-AZ)

  InstanceType:
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
    Description: EC2 instance type for the benchmark runner

  AllowedSSHCIDR:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block allowed to access SSH (should be restricted to your IP or VPN range)

  AllowEC2InstanceConnect:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to allow EC2 Instance Connect to access the instance

Conditions:
  EnableEC2InstanceConnect: !Equals [!Ref AllowEC2InstanceConnect, 'true']

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-VPC

  # VPC Flow Logs for network traffic monitoring
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Sub "/${AWS::StackName}/vpc-flow-logs"
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-VPC-FlowLogs

  VPCFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/vpc-flow-logs"
      RetentionInDays: 14

  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VPCFlowLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}/vpc-flow-logs:*"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-IGW
        - Key: Project
          Value: OpenSearch-Benchmark

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: !If [EnableEC2InstanceConnect, true, false]  # Enable for EC2 Instance Connect if needed
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-Public-Subnet
        - Key: Project
          Value: OpenSearch-Benchmark

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-Private-Subnet-1
        - Key: Project
          Value: OpenSearch-Benchmark

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-Private-Subnet-2
        - Key: Project
          Value: OpenSearch-Benchmark

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-Route-Table
        - Key: Project
          Value: OpenSearch-Benchmark

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Security Groups with proper descriptions and restricted access
  BenchmarkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for benchmark EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress: !If
        - EnableEC2InstanceConnect
        - - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref AllowedSSHCIDR
            Description: "Allows SSH access from specified CIDR range for administration"
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 18.206.107.24/29
            Description: "Allows SSH access from EC2 Instance Connect (us-east-1)"
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 3.16.146.0/29
            Description: "Allows SSH access from EC2 Instance Connect (us-east-2)"
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 13.52.6.112/29
            Description: "Allows SSH access from EC2 Instance Connect (us-west-1)"
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 18.237.140.160/29
            Description: "Allows SSH access from EC2 Instance Connect (us-west-2)"
        - - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref AllowedSSHCIDR
            Description: "Allows SSH access from specified CIDR range for administration"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "Allows HTTPS outbound traffic for package downloads and API calls"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Allows HTTP outbound traffic for package downloads"
        #- IpProtocol: tcp
        #  FromPort: 443
        #  ToPort: 443
        #  DestinationSecurityGroupId: !Ref OpenSearchSecurityGroup
        #  Description: "Allows HTTPS traffic to OpenSearch domain"
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-EC2-SG
        - Key: Project
          Value: OpenSearch-Benchmark

  OpenSearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for OpenSearch domain
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref BenchmarkSecurityGroup
          Description: "Allows HTTPS access from benchmark instances"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.1.0.0/16
          Description: "Allows HTTPS access from DR VPC for replication"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.1.0.0/16
          Description: "Allows HTTPS outbound traffic to DR VPC for replication"
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-Domain-SG
        - Key: Project
          Value: OpenSearch-Benchmark
      
  BenchmarkToOpenSearchEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BenchmarkSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref OpenSearchSecurityGroup
      Description: "Allows HTTPS traffic to OpenSearch domain"

  # IAM Role and Instance Profile
  BenchmarkRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-IAM-Role
        - Key: Project
          Value: OpenSearch-Benchmark
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: OpenSearchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttp*
                  - es:Describe*
                  - es:List*
                  - es:Get*
                  - es:StartDomainMaintenance
                Resource: 
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomainName}/*
                  - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomainName}
              
  BenchmarkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BenchmarkRole

  # OpenSearch Domain with logging enabled
  OpenSearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/opensearch/${OpenSearchDomainName}"
      RetentionInDays: 30

  OpenSearchLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: OpenSearchLogPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:PutLogEventsBatch
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/opensearch/${OpenSearchDomainName}:*"
      Roles:
        - !Ref OpenSearchLogRole

  OpenSearchLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: sts:AssumeRole 
  
  OpenSearchLogResourcePolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: OpenSearchLogResourcePolicy
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
             "Effect": "Allow",
             "Principal": {
               "Service": "es.amazonaws.com"
             },
             "Action": [
               "logs:CreateLogStream",
               "logs:PutLogEvents",
               "logs:PutLogEventsBatch"
             ],
             "Resource": [
              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/opensearch/${OpenSearchDomainName}:*",
              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/opensearch/${OpenSearchDomainName}"
             ]
            }
          ]
        }


  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - 
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 
              - es:*
              - es:StartDomainMaintenance
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomainName}/*
          - 
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 
              - es:ESCrossClusterGet
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomainName}
      DomainName: !Ref OpenSearchDomainName
      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-Domain
        - Key: Project
          Value: OpenSearch-Benchmark
      EngineVersion: OpenSearch_2.5
      ClusterConfig: !If
        - IsStandardConfig
        - # Standard configuration with dedicated master nodes
          InstanceType: r6g.large.search
          InstanceCount: !Ref DataNodeCount
          DedicatedMasterEnabled: true
          DedicatedMasterType: r6g.large.search
          DedicatedMasterCount: 3
          ZoneAwarenessEnabled: true
          ZoneAwarenessConfig:
            AvailabilityZoneCount: 2
        - !If
          - IsMinimalConfig
          - # Minimal configuration without dedicated nodes
            InstanceType: r6g.large.search
            InstanceCount: !Ref DataNodeCount
            DedicatedMasterEnabled: false
            ZoneAwarenessEnabled: true
            ZoneAwarenessConfig:
              AvailabilityZoneCount: 2
          - # Configuration with coordinator nodes
            InstanceType: r6g.large.search
            InstanceCount: !Ref DataNodeCount
            DedicatedMasterEnabled: true
            DedicatedMasterType: r6g.large.search
            DedicatedMasterCount: 3
            WarmEnabled: false
            ColdEnabled: false
            CoordinatorEnabled: true
            CoordinatorInstanceType: r6g.large.search
            CoordinatorInstanceCount: 2
            ZoneAwarenessEnabled: true
            ZoneAwarenessConfig:
              AvailabilityZoneCount: 2
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 150
        VolumeType: gp3
      VPCOptions:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref OpenSearchSecurityGroup
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: admin
          MasterUserPassword: Admin123!
      LogPublishingOptions:
        ES_APPLICATION_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        AUDIT_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        INDEX_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true
        SEARCH_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt OpenSearchLogGroup.Arn
          Enabled: true

  # EC2 Instance for Benchmark
  BenchmarkInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PublicSubnet1
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: "true"
            VolumeSize: "100" 
            VolumeType: "gp3"
            Encrypted: true  # Added encryption for EBS volumes
      SecurityGroupIds:
        - !Ref BenchmarkSecurityGroup
      IamInstanceProfile: !Ref BenchmarkInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e

          # Update system and install dependencies
          yum update -y

          # Create a new virtual environment
          python3 -m venv benchmark-env

          # Activate the virtual environment
          source benchmark-env/bin/activate

          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          rm -rf aws awscliv2.zip

          sudo yum install python3-pip -y

          echo "********* Pip installed **********"

          sudo yum install git -y

          echo "********* Git installed **********"

          # Create a new virtual environment
          python3 -m venv benchmark-env

          # Activate the virtual environment
          source benchmark-env/bin/activate

          # Install opensearch-benchmark in the virtual environment
          sudo pip3 install opensearch-benchmark --ignore-installed

          echo "********* OpenSearch benchmark installed **********"

          #create result Directory   
          RESULT_DIR="/home/ec2-user/results"     
          mkdir -p "$RESULT_DIR"

          # Create test scripts directory
          mkdir -p /home/ec2-user/benchmark-scripts
          cd /home/ec2-user/benchmark-scripts

          # Create basic benchmark test script
          cat > run-benchmark.sh << 'EOL'
          #!/bin/bash
          set -e

          # Default values
          RESULT_DIR="/home/ec2-user/results"
          WORKLOAD="geonames"
          TEST_PROCEDURE="default"
          DOMAIN_ENDPOINT="https://${OpenSearchDomain.DomainEndpoint}"

          echo "Running benchmark with:"
          echo "- Workload: $WORKLOAD"
          echo "- Test procedure: $TEST_PROCEDURE"
          echo ""
          
          if [ -z "$DOMAIN_ENDPOINT" ]; then
            echo "Error: Could not retrieve OpenSearch domain endpoint"
            exit 1
          fi
          
          echo "Using OpenSearch endpoint: $DOMAIN_ENDPOINT"
          
          # Run the benchmark
          nohup opensearch-benchmark execute-test \
          --target-hosts="$DOMAIN_ENDPOINT" \
          --client-options="use_ssl:true,verify_certs:false,basic_auth_user:admin,basic_auth_password:Admin123!" \
          --workload="$WORKLOAD" \
          --workload-params="number_of_replicas: 1","number_of_shards: 4" \
          --pipeline=benchmark-only \
          --results-file="$RESULT_DIR/benchmark-results-$(date +%Y%m%d-%H%M%S).json" \
          --kill-running-processes &

          EOL

          chmod +x run-benchmark.sh
          
          # Create monitoring script
          cat > monitor-cluster.sh << 'EOL'
          #!/bin/bash
          
          # Default values
          INTERVAL=5
          RESULT_DIR="/home/ec2-user/results" 
          
          # Generate timestamp for this monitoring session
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          echo "Starting OpenSearch cluster monitoring (Ctrl+C to stop)"
          echo "Results will be saved to $RESULT_DIR"
              
          while true; do
            CURRENT_TIME=$(date +%Y-%m-%d_%H:%M:%S)
            
            # Get OpenSearch domain endpoint if not already set
            if [ -z "$DOMAIN_ENDPOINT" ]; then
              DOMAIN_ENDPOINT=$(aws opensearch describe-domain --domain-name ${OpenSearchDomainName} --region ${AWS::Region} --query 'DomainStatus.Endpoints' --output text)
              if [ -z "$DOMAIN_ENDPOINT" ]; then
                echo "Error: Could not retrieve OpenSearch domain endpoint"
                exit 1
              fi
              echo "Using OpenSearch endpoint: $DOMAIN_ENDPOINT"
            fi
              
            # Cluster health
            sudo curl -s -u admin:Admin123! --insecure "https://$DOMAIN_ENDPOINT/_cluster/health" | \
              jq '. + {"timestamp": "'"$CURRENT_TIME"'"}' >> "$RESULT_DIR/cluster_health_$TIMESTAMP.json"
            
            # Node stats
            sudo curl -s -u admin:Admin123! --insecure "https://$DOMAIN_ENDPOINT/_nodes/stats" | \
              jq '. + {"timestamp": "'"$CURRENT_TIME"'"}' >> "$RESULT_DIR/node_stats_$TIMESTAMP.json"
            
            # Index stats
            sudo curl -s -u admin:Admin123! --insecure "https://$DOMAIN_ENDPOINT/_stats" | \
              jq '. + {"timestamp": "'"$CURRENT_TIME"'"}' >> "$RESULT_DIR/index_stats_$TIMESTAMP.json"
              
            echo "Collected metrics at $CURRENT_TIME"
            sleep $INTERVAL
          done
          EOL
          chmod +x monitor-cluster.sh
          
          echo "OpenSearch Benchmark installation and configuration completed!"

          # Create high resilencey test script
          cat > resilency-test.sh << 'EOL'
          #!/bin/bash
          
          # CloudFormation template would pass these as variables that get substituted
          OPENSEARCH_DOMAIN="benchmark-domain" #name
          AWS_REGION="us-east-1"
          RESULT_DIR="/home/ec2-user/results"
          
          # Get domain endpoint and credentials
          DOMAIN_ENDPOINT="https://${OpenSearchDomain.DomainEndpoint}"
          
          LOG_FILE="/home/ec2-user/benchmark-logs/benchmark_$(date +%Y%m%d-%H%M%S).log"
          mkdir -p /home/ec2-user/benchmark-logs
          
          echo "" | tee -a "$LOG_FILE"
          echo "******* Starting Resiliency script *******" | tee -a "$LOG_FILE"
          echo "Starting Benchmark......" | tee -a "$LOG_FILE"

          # Start benchmark in background
          nohup opensearch-benchmark execute-test \
            --target-hosts="$DOMAIN_ENDPOINT" \
            --client-options="use_ssl:true,verify_certs:false,basic_auth_user:admin,basic_auth_password:Admin123!" \
            --workload=nyc_taxis \
            --workload-params="number_of_replicas: 1","number_of_shards: 4" \
            --pipeline=benchmark-only \
            --results-file="$RESULT_DIR/benchmark-results-$(date +%Y%m%d-%H%M%S).json" \
            --kill-running-processes > "$LOG_FILE" 2>&1 &
          
          # Store benchmark process ID
          BENCHMARK_PID=$!
          
          echo "Benchmark process ID: $BENCHMARK_PID" | tee -a "$LOG_FILE"
          
          # Wait for benchmark to warm up
          sleep 300
          
          # Function to get a random node ID from the domain
          
          get_random_node_id() {
            # Get all node IDs using describe-domain-nodes
            NODE_IDS=$(aws opensearch describe-domain-nodes \
                --domain-name "benchmark-domain" \
                --region "us-east-1" \
                --query 'DomainNodesStatusList[?NodeType==`Data`].NodeId' \
                --output text)
          
            # Count the actual number of nodes
            NODE_COUNT=$(echo "$NODE_IDS" | wc -w)
            if [ "$NODE_COUNT" -eq 0 ]; then
                echo "No nodes found in domain $OPENSEARCH_DOMAIN" 
                exit 1
            fi
          
            RANDOM_NODE=$((1 + RANDOM % NODE_COUNT))
          
            # Initialize variables
            COUNT=0
            SELECTED_NODE=""
          
            # Process space-separated string without array
            for node in $NODE_IDS; do
                COUNT=$((COUNT + 1))
                if [ $COUNT -eq $RANDOM_NODE ]; then
                    SELECTED_NODE="$node"
                    break
                fi
            done
          
            # Return selected node ID
            echo "$SELECTED_NODE"
          }
          
          # Get random node ID
          SELECTED_NODE_ID=$(get_random_node_id)
          
          if [ -z "$SELECTED_NODE_ID" ]; then
              echo "Failed to get node ID" | tee -a "$LOG_FILE"
              exit 1
          fi
          
          echo "Random node: $SELECTED_NODE_ID" | tee -a "$LOG_FILE"
          
          echo "Node restart initiated" | tee -a "$LOG_FILE"
          
          # Initiate node restart using start-domain-maintenance
          MAINTENANCE_ID=$(aws opensearch start-domain-maintenance \
            --domain-name "$OPENSEARCH_DOMAIN" \
            --region "$AWS_REGION" \
            --action REBOOT_NODE \
            --node-id "$SELECTED_NODE_ID" \
            --query 'MaintenanceId' \
            --output text)
          
          # Check if MAINTENANCE_ID was successfully obtained
          if [ -z "$MAINTENANCE_ID" ] || [ "$MAINTENANCE_ID" == "None" ]; then
              echo "Failed to start domain maintenance. Exiting..." | tee -a "$LOG_FILE"
              exit 1
          fi
          
          # Monitor node restart status
          while true; do
            STATUS=$(aws opensearch get-domain-maintenance-status \
              --domain-name "$OPENSEARCH_DOMAIN" \
              --maintenance-id $MAINTENANCE_ID \
              --region "$AWS_REGION" \
              --query 'Status' \
              --output text)
          
            if [ "$STATUS" == "COMPLETED" ]; then
              echo "Maintenance completed successfully" | tee -a "$LOG_FILE"
              break
            fi
            echo "Current status: $STATUS"
            sleep 60
          done
          
          # Let benchmark continue for a while after restart
          sleep 300
          
          # Wait for benchmark to finish
          wait $BENCHMARK_PID

          EOL

          chmod +x resilency-test.sh

          echo "Resilency script created" | tee -a "$LOG_FILE"

      Tags:
        - Key: Name
          Value: OpenSearch-Benchmark-Instance

Conditions:
  IsStandardConfig: !Equals [!Ref ClusterConfig, 'standard']
  IsMinimalConfig: !Equals [!Ref ClusterConfig, 'minimal']
  IsCoordinatorConfig: !Equals [!Ref ClusterConfig, 'coordinator']
  EnableEC2InstanceConnect: !Equals [!Ref AllowEC2InstanceConnect, 'true']

Mappings:
  RegionMap:
    us-east-1:
      AMI: resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    us-east-2:
      AMI: ami-02d1e544b84bf7502
    us-west-1:
      AMI: ami-0d9858aa3c6322f73
    us-west-2:
      AMI: ami-098e42ae54c764c35

Outputs:
  BenchmarkInstancePublicIP:
    Description: Public IP of the benchmark EC2 instance
    Value: !GetAtt BenchmarkInstance.PublicIp

  OpenSearchDomainEndpoint:
    Description: Endpoint of the OpenSearch domain
    Value: !GetAtt OpenSearchDomain.DomainEndpoint

  VPCIdPri:
    Description: VPC ID
    Value: !Ref VPC
